# -*- coding: utf-8 -*-
"""
Created on Mon Mar 21 12:01:43 2022

@author: bwb16179

Chapter 1 - Why we are here - fast AI
"""
import numpy as np

# =============================================================================
# Matrix-vector Products
# =============================================================================

# =============================================================================
# A = np.array([0.85, 0.1, 0.05, 0.0])
# B = np.array([[0.9, 0.07, 0.02, 0.01],
#                [0.00, 0.93, 0.05, 0.02],
#                [0.0, 0.0, 0.85, 0.15],
#                [0.0, 0.0, 0.0, 1.00]])
# C = np.transpose(A)
# D = np.transpose(B)
# 
# print((A @ B).T)
# =============================================================================

# =============================================================================
# Matrix-Matrix Products
# =============================================================================


# =============================================================================
# A = np.array([[6, 5, 3, 1],
#               [3, 6, 2, 2],
#               [3, 4, 3, 1]])
# B = np.array([[1.5, 1],
#               [2, 2.5],
#               [5, 4.5],
#               [16, 17]])
# 
# print(A @ B)
# =============================================================================

# =============================================================================
# inaccuracy with computer representations
# =============================================================================

# =============================================================================
# Different when written by hand than here
# =============================================================================

# =============================================================================
# def f(x):
#     if x <= 1/2:
#         return 2 * x
#     if x > 1/2:
#         return 2*x - 1
# 
# x = 1/10
# for i in range(80):
#     print(x)
#     x = f(x)
# =============================================================================

# =============================================================================
# Conditioning and Stability
# Eigenvalues of a matrix
# =============================================================================

import scipy.linalg as la 

A = np.array([[1., 1000], [0, 1]])
B = np.array([[1, 1000], [0.001, 1]])

print(A)

print(B)

np.set_printoptions(suppress=True, precision=4) # stops loads of zeros in output

wA, vrA = la.eig(A)
wB, vrB = la.eig(B)

print(wA, wB)

# =============================================================================
# Very different eigenvalues for very small changes to input (1&1 versus 2&0)
# =============================================================================

